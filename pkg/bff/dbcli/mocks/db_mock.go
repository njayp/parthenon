// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/njayp/parthenon/pkg/bff/dbcli (interfaces: DBCli)

// Package mock_dbcli is a generated GoMock package.
package mock_dbcli

import (
	sql "database/sql"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockDBCli is a mock of DBCli interface.
type MockDBCli struct {
	ctrl     *gomock.Controller
	recorder *MockDBCliMockRecorder
}

// MockDBCliMockRecorder is the mock recorder for MockDBCli.
type MockDBCliMockRecorder struct {
	mock *MockDBCli
}

// NewMockDBCli creates a new mock instance.
func NewMockDBCli(ctrl *gomock.Controller) *MockDBCli {
	mock := &MockDBCli{ctrl: ctrl}
	mock.recorder = &MockDBCliMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBCli) EXPECT() *MockDBCliMockRecorder {
	return m.recorder
}

// EnsureDBandCli mocks base method.
func (m *MockDBCli) EnsureDBandCli(arg0 string) (*sql.DB, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnsureDBandCli", arg0)
	ret0, _ := ret[0].(*sql.DB)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnsureDBandCli indicates an expected call of EnsureDBandCli.
func (mr *MockDBCliMockRecorder) EnsureDBandCli(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnsureDBandCli", reflect.TypeOf((*MockDBCli)(nil).EnsureDBandCli), arg0)
}
